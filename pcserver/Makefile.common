

# Enable verbose compile with make V=1
ifeq ($(V),1)
  V1=
  V2=@\#
else
  V1=@
  V2=@echo
endif

# Cross compile for Windows with make WIN=y
# Please note doc/README-win32
ifeq ($(WIN),y)
  ARCH    = win32
  CROSS   = i686-w64-mingw32.static-
  CFLAGS  = -DCURL_STATICLIB -pedantic
  LDFLAGS = -static -Wl,-Bsymbolic-functions -lcurl -lssh2 -lidn -lgcrypt \
            -lgnutls -lcrypt32 -lwldap32 -lz -lnettle -lintl -liconv \
            -lhogweed -lgmp -lgnutls-openssl -lgpg-error -lws2_32
  TARGET  = $(TARGET).exe
else
  ARCH    = posix
  #output of `curl-config --libs`
  #LDFLAGS=-L/usr/lib/i386-linux-gnu -lcurl -Wl,-Bsymbolic-functions
  LDFLAGS = -lncurses -lcurl -lc
endif


all: $(TARGET) 

PREFIX=/usr/local
BINDIR=bin
DOCDIR=xd2031/doc
SAMPLEDIR=xd2031/sample
TOOLSDIR=xd2031/tools
# OBJDIR contains temporary object and dependency files
OBJDIR=obj/$(ARCH)/
DEPDIR=$(OBJDIR).dep/
# The space separeted list of directories in DROPDIR will be removed at uninstall too
DROPDIR=xd2031

CC=$(CROSS)gcc
LD=$(CROSS)gcc
PKG_CONFIG=$(CROSS)pkg-config

# Create automatic dependency files (*.d) on the fly during compilation
AUTODEP=-MMD -MP -MF $(DEPDIR)$(@F).d

# Sorting include paths and defines simplifies checking them
#INCPATHS=. ../common util os handler $(ARCH)
INCLUDE=$(sort $(addprefix -I,$(INCPATHS)))

CFLAGS+=-g -W -Wall -pedantic -ansi -std=c99 -funsigned-char $(INCLUDE) -DSERVER

#SRC=$(wildcard *.c) $(wildcard util/*.c) $(wildcard os/*.c)  $(wildcard handler/*.c) $(wildcard ../common/*.c) $(wildcard $(ARCH)/*.c)


# Create object names from .c and .S
_OBJ=$(notdir $(patsubst %.c,%.o,$(patsubst %.S,%.o,$(SRC))))
OBJ=$(addprefix $(OBJDIR),$(_OBJ))
# Create dependency names from .o
DEP=$(addprefix $(DEPDIR),$(_OBJ:.o=.o.d))

# locations where make searches C source files
#vpath %.c . ../common util os handler $(ARCH)

# Include automatic dependencies, continue if they don't exist yet
-include $(DEP)


# Compile C files
$(OBJDIR)%.o: %.c
	$(V2) CC $<
	$(V1) $(CC) $(CFLAGS) $(AUTODEP) -c $< -o $@

# Link object files
$(TARGET): $(OBJDIR) $(DEPDIR) $(OBJ)
	$(V2) LD $(notdir $@)
	$(V1) $(LD) $(OBJ) -o $@ $(LDFLAGS)
	$(V1)# Note: LIBS must be at the end for curl/libs to be found
	@echo 'fsser opens the serial device with user rights.'

veryclean: clean
	rm -rf $(TARGET) obj

# Clean directories
clean: objclean depclean

objclean:
	$(V2) Cleaning object files
	$(V1) rm -f $(OBJ)
	@# The object directory gets removed by make depclean

depclean:
	$(V2) Cleaning dependencies
	$(V1) rm -f $(DEP)
	$(V1) if [ -d $(DEPDIR) ]; then rmdir --ignore-fail-on-non-empty $(DEPDIR); fi


# Create build directories
$(OBJDIR):
	$(V1) mkdir -p $@
$(DEPDIR):
	$(V1) mkdir -p $@

install:
	@if [ `id -u` != "0" ] ; then echo "must be root!"; exit 1; fi;
	test -d $(PREFIX) || mkdir -p $(PREFIX)
	test -d $(PREFIX)/$(BINDIR) || mkdir -p $(PREFIX)/$(BINDIR)
	install -m 0755 fsser $(PREFIX)/$(BINDIR)
	test -d $(PREFIX)/$(DOCDIR) || mkdir -p $(PREFIX)/$(DOCDIR)
	cp ../doc/* $(PREFIX)/$(DOCDIR)
	test -d $(PREFIX)/$(SAMPLEDIR) || mkdir -p $(PREFIX)/$(SAMPLEDIR)
	cp ../sample/* $(PREFIX)/$(SAMPLEDIR)
	test -d $(PREFIX)/$(TOOLSDIR) || mkdir -p $(PREFIX)/$(TOOLSDIR)
	cp ../tools/* $(PREFIX)/$(TOOLSDIR)

uninstall:
	@if [ `id -u` != "0" ] ; then echo "must be root!"; exit 1; fi;
	rm -f $(PREFIX)/$(BINDIR)/fsser
	rm -f $(PREFIX)/$(DOCDIR)/*
	rmdir $(PREFIX)/$(DOCDIR) 2>/dev/null | exit 0
	rm -f $(PREFIX)/$(SAMPLEDIR)/*
	rmdir $(PREFIX)/$(SAMPLEDIR) 2>/dev/null | exit 0
	rm -f $(PREFIX)/$(TOOLSDIR)/*
	rmdir $(PREFIX)/$(TOOLSDIR) 2>/dev/null | exit 0
	for i in $(DROPDIR) ; do \
	  rmdir $(PREFIX)/$$i 2>/dev/null | exit 0; \
	done;

-include $(ARCH)/$(ARCH).mk

