diff -ur vice-2.4-patchset1/src/autostart.c vice-2.4-patchset2/src/autostart.c
--- vice-2.4-patchset1/src/autostart.c	2011-09-14 20:44:45.000000000 +0200
+++ vice-2.4-patchset2/src/autostart.c	2016-01-08 22:41:31.081807314 +0100
@@ -155,7 +155,7 @@
 
 /* ------------------------------------------------------------------------- */
 
-static int autostart_basic_load = 0;
+int autostart_basic_load = 0;
 
 static int AutostartRunWithColon = 0;
 
diff -ur vice-2.4-patchset1/src/autostart-prg.c vice-2.4-patchset2/src/autostart-prg.c
--- vice-2.4-patchset1/src/autostart-prg.c	2010-12-21 19:46:21.000000000 +0100
+++ vice-2.4-patchset2/src/autostart-prg.c	2016-01-08 22:41:31.113808165 +0100
@@ -46,6 +46,8 @@
 /* program from last injection */
 static autostart_prg_t *inject_prg;
 
+extern int autostart_basic_load;
+
 
 static autostart_prg_t * load_prg(const char *file_name, fileio_info_t *finfo, log_t log)
 {
@@ -73,6 +75,10 @@
     prg->start_addr = (WORD)hi << 8 | (WORD)lo;
     prg->size -= 2; /* skip load addr */
 
+    if (autostart_basic_load) {
+	prg->start_addr = 0x801;
+    }
+
     /* check range */
     end = prg->start_addr + prg->size - 1;
     if (end > 0xffff) {
diff -ur vice-2.4-patchset1/src/serial/serial-iec-device.c vice-2.4-patchset2/src/serial/serial-iec-device.c
--- vice-2.4-patchset1/src/serial/serial-iec-device.c	2009-09-13 10:20:29.000000000 +0200
+++ vice-2.4-patchset2/src/serial/serial-iec-device.c	2016-01-10 21:55:23.816846046 +0100
@@ -29,6 +29,7 @@
 
 #include <stdio.h>
 #include <string.h>
+#include <ctype.h>
 
 #include "cmdline.h"
 #include "iecbus.h"
@@ -45,7 +46,8 @@
 void serial_iec_device_disable(unsigned int devnr);
 static void serial_iec_device_exec_main(unsigned int devnr, CLOCK clk_value);
 
-/* ------------------------------------------------------------------------- */
+
+// --------------------------------------------------------------------------------
 
 
 static int iec_device_enabled[IECBUS_NUM];
@@ -169,13 +171,166 @@
 #define IEC_DEVICE_DEBUG 0
 
 /* Logging goes here.  */
-#if IEC_DEVICE_DEBUG > 0
+#if 1 //IEC_DEVICE_DEBUG > 0
 static log_t serial_iec_device_log = LOG_ERR;
 #endif
 
+/*------------------------------------------------------------------------*/
+
+#undef	SIEC_DEBUG
+
+#define SIEC_ATN        0x01            /* M->D send a byte with ATN */
+#define SIEC_SEND       0x02            /* M->D send a byte to device */
+#define SIEC_REQ        0x03            /* M->D request a byte from device */
+#define SIEC_OFFER      0x04            /* D->M offer a byte for a receive */
+
+#define SIEC_ACK        0x40            /* ACKnowledge a byte to receiver as part of a REQ */
+#define SIEC_EOF        0x80            /* when set on SEND or OFFER, transfer with EOF */
+
+static FILE *traceiecFile = NULL;
+
+#define TRIEC_ATN       1
+#define TRIEC_SEND      2
+#define TRIEC_RECV      3
+
+static int traceiecState = 0;
+static int traceieceof = 0;
+
+static int traceiecBuflen = 0;
+static char traceiecBuf[4096];
+
+static FILE *getTraceFile(void) {
+
+        if (traceiecFile == NULL) {
+
+                traceiecFile = fopen("sockiec.trace", "w");
+
+                if (traceiecFile == NULL) {
+                        log_warning(serial_iec_device_log, "Could not open sockiec trace file\n");
+                }
+        }
+
+        return traceiecFile;
+}
+static void siec_close(int doEof) {
+
+#ifdef SIEC_DEBUG
+        log_warning(serial_iec_device_log, "siec_close(st=%d, n=%d, eof=%d)", traceiecState, traceiecBuflen, doEof);
+#endif
+
+        if (traceiecBuflen > 0) {
+                switch (traceiecState) {
+                case TRIEC_ATN:
+                        fprintf(getTraceFile(), "atn");
+                        break;
+                case TRIEC_SEND:
+                        if (doEof != 0) {
+                                fprintf(getTraceFile(), "send");
+                        } else {
+                                fprintf(getTraceFile(), "sendnoeof");
+                        }
+                        break;
+                case TRIEC_RECV:
+                        printf("RECV: doEof=%d\n", doEof);
+                        fprintf(getTraceFile(), doEof ? "recv" : "expect");
+                        break;
+                }
+                int i;
+                int isPrint = 0;
+                for(i = 0; i < traceiecBuflen; i++) {
+                        char c = traceiecBuf[i];
+                        if (((traceiecState == TRIEC_RECV) || (traceiecState == TRIEC_SEND)) && (isPrint == 0) && (c != '"') && isprint(c)) {
+                                fprintf(getTraceFile(), " \"");
+                                isPrint = 1;
+                        }
+                        if ((isPrint == 1) && (c == '"' || !isprint(c))) {
+                                fprintf(getTraceFile(), "\"");
+                                isPrint = 0;
+                        }
+                        if (isPrint) {
+                                fprintf(getTraceFile(), "%c", c);
+                        } else {
+                                fprintf(getTraceFile(), " %02x", 255&traceiecBuf[i]);
+                        }
+                }
+                if (isPrint) {
+                        fprintf(getTraceFile(), "\"");
+                }
+                fprintf(getTraceFile(), "\n");
+                fflush(getTraceFile());
+        }
+
+        traceiecBuflen = 0;
+        traceiecState = 0;
+}
+
+static void siec_attention(int b) {
+
+#ifdef SIEC_DEBUG
+        log_warning(serial_iec_device_log, "siec_attention(%x)", b);
+#endif
+
+        if (traceiecState != 0 && traceiecState != TRIEC_ATN) {
+                siec_close(((traceiecState == TRIEC_RECV) || (traceiecState == TRIEC_SEND)) ? traceieceof : 0);
+        }
+
+        traceiecState = TRIEC_ATN;
+        traceiecBuf[traceiecBuflen++] = b;
+
+        if (b == 0x5f || b == 0x3f) {
+                siec_close(0);
+        }
+}
+
+static void siec_send(BYTE b, int eof) {
+
+#ifdef SIEC_DEBUG
+        log_warning(serial_iec_device_log, "siec_send(%x, eof=%d)", b, eof);
+#endif
+
+        if (traceiecState != 0 && traceiecState != TRIEC_SEND) {
+                siec_close(0);
+        }
+
+        traceiecState = TRIEC_SEND;
+        traceiecBuf[traceiecBuflen++] = b;
+        traceieceof = eof;
+}
+
+static void siec_recv(BYTE b, int fake, int iseof) {
+
+
+#ifdef SIEC_DEBUG
+        log_warning(serial_iec_device_log, "siec_recv(%x, fake=%d, iseof=%d)", b, fake, iseof);
+#endif
+        if (traceiecState != 0 && traceiecState != TRIEC_RECV) {
+                siec_close(0);
+        }
+
+        traceiecState = TRIEC_RECV;
+        traceiecBuf[traceiecBuflen] = b;
+        traceieceof = iseof;
+
+        if (!fake) {
+                traceiecBuflen++;
+        }
+        if (iseof && !fake) {
+                siec_close(1);
+        } else
+        if (traceiecBuflen > 16) {
+                siec_close(0);
+        }
+}
+
+
+/* ------------------------------------------------------------------------- */
+
+
 struct serial_iec_device_state_s {
   BYTE  enabled;
-  BYTE  byte, state, flags, primary, secondary, secondary_prev;
+  BYTE  byte, state, primary, secondary, secondary_prev;
+  WORD  flags;
+  BYTE  eoi;
   BYTE  st[16];
   CLOCK timeout;
 };
@@ -332,9 +487,13 @@
     P_DONE0, P_DONE1,
     P_FRAMEERR0, P_FRAMEERR1,
 
-    P_TALKING   = 0x20,
-    P_LISTENING = 0x40,
-    P_ATN       = 0x80
+    P_POST0, P_PRE3, P_WAITEOI,
+
+    P_SNOOPING  = 0x100,
+    P_TALKING   = 0x200,
+    P_LISTENING = 0x400,
+    P_ATN       = 0x800
+
 };
 
 
@@ -355,13 +514,17 @@
                 (bus & IECBUS_DEVICE_READ_DATA) ? 1 : 0);
 #endif
 
+    int unit = iec->primary & 0x1f;
+
     if (!(iec->flags & P_ATN) && !(bus & IECBUS_DEVICE_READ_ATN)) {
         /* falling flank on ATN (bus master addressing all devices) */
         iec->state          = P_PRE0;
         iec->flags         |= P_ATN;
+        iec->flags         &= ~P_SNOOPING;
         iec->primary        = 0;
         iec->secondary_prev = iec->secondary;
         iec->secondary      = 0;
+        iec->eoi	    = 0;
         iec->timeout        = clk_value+US2CYCLES(100);
 
         /* set DATA=0 ("I am here").  If nobody on the bus does this within 1ms,
@@ -371,8 +534,11 @@
         /* rising flank on ATN (bus master finished addressing all devices) */
         iec->flags &= ~P_ATN;
 
-        if ((iec->primary == 0x20 + devnr) || (iec->primary == 0x40 + devnr)) {
+	//printf("end of atn %02x %02x\n", iec->primary, iec->secondary);
+
+        if (((iec->primary & 0xe0) == 0x20) || ((iec->primary & 0xe0) == 0x40)) {
             if ((iec->secondary & 0xf0) == 0x60) {
+		if (unit == devnr) 
                 switch (iec->primary & 0xf0) {
                   case 0x20:
                     serial_iec_bus_listen(devnr, iec->secondary, set_st);
@@ -382,10 +548,13 @@
                     break;
                 }
             } else if ((iec->secondary & 0xf0) == 0xe0) {
+		if (unit == devnr) {
                 set_st(0);
                 serial_iec_bus_close(devnr, iec->secondary, set_st);
                 iec->st[iec->secondary & 0x0f] = get_st();
+		}
             } else if ((iec->secondary & 0xf0) == 0xf0) {
+		if (unit == devnr) {
                 /* iec_bus_open() will not actually open the file (since we
                    don't have a filename yet) but just set things up so that
                    the characters passed to iec_bus_write() before the next
@@ -396,9 +565,10 @@
                 set_st(0);
                 serial_iec_bus_open(devnr, iec->secondary, set_st);
                 iec->st[iec->secondary & 0x0f] = get_st();
+		}
             }
 
-            if (iec->primary == 0x20 + devnr) {
+            if ((iec->primary & 0xe0) == 0x20) {
                 /* we were told to listen */
                 iec->flags &= ~P_TALKING;
 
@@ -407,6 +577,7 @@
                    the "LISTEN" request which will signal the error to the
                    sender */
 
+		if (unit == devnr) {
                 if (iec->st[iec->secondary & 0x0f] == 0) {
                     iec->flags |=  P_LISTENING;
                     iec->state  =  P_PRE1;
@@ -415,10 +586,20 @@
                                 "device %i start listening", devnr);
 #endif
                 }
+		} else {
+                    iec->flags |=  P_SNOOPING;
+                    iec->state  =  P_PRE1;
+#if IEC_DEVICE_DEBUG > 3
+                    log_message(serial_iec_device_log,
+                                "device %i start snooping on listen", devnr);
+#endif
+		}
+			
               
                 /* set DATA=0 ("I am here") */
                 iecbus_device_write(devnr, (BYTE)IECBUS_DEVICE_WRITE_CLK);
-            } else if (iec->primary == 0x40 + devnr) {
+            } else if ((iec->primary & 0xe0) == 0x40) {
+		if (unit == devnr) {
                 /* we were told to talk */
                 iec->flags &= ~P_LISTENING;
                 iec->flags |=  P_TALKING;
@@ -427,6 +608,14 @@
                 log_message(serial_iec_device_log,
                             "device %i start talking", devnr);
 #endif
+		} else {
+                    iec->flags |=  P_SNOOPING;
+                    iec->state  =  P_PRE0;
+#if IEC_DEVICE_DEBUG > 3
+                    log_message(serial_iec_device_log,
+                                "device %i start snooping on talk", devnr);
+#endif
+		}
             }
         } else if ((iec->primary == 0x3f) && (iec->flags & P_LISTENING)) {
             /* all devices were told to stop listening */
@@ -460,9 +649,171 @@
         }
     }
 
+    if (iec->flags & P_SNOOPING) {
+        /* we are snooping the bus for traffic to another device */
+
+        switch (iec->state) {
+          case P_PRE0: 
+            /* ignore anything that happens during first 100us after falling
+               flank on ATN (other devices may have been sending and need
+               some time to set CLK=1) */
+            if ( clk_value >= iec->timeout )
+            iec->state = P_PRE1;
+            break;
+          case P_PRE1: 
+            /* make sure CLK=0 so we actually detect a rising flank in
+               state P_PRE2 */
+            if (!(bus & IECBUS_DEVICE_READ_CLK))
+                iec->state = P_PRE2;
+            break;
+          case P_PRE2: 
+            /* wait for rising flank on CLK ("ready-to-send") */
+            if (bus & IECBUS_DEVICE_READ_CLK) {
+                /* react by setting DATA=1 ("ready-for-data") */
+                iec->state = P_PRE3;
+            }
+	    break;
+	  case P_PRE3:
+            if (bus & IECBUS_DEVICE_READ_DATA) {
+                iec->state = P_READY;
+                iec->timeout = clk_value + US2CYCLES(200);
+	    }
+	    break;	
+          case P_READY:
+            if (!(bus & IECBUS_DEVICE_READ_CLK)) {
+                /* sender set CLK=0, is about to send first bit */
+                iec->state = P_BIT0;
+		iec->eoi = 0;
+            } else if (!(iec->flags & P_ATN)
+                && (clk_value >= iec->timeout)) {
+                /* sender did not set CLK=0 within 200us after we set DATA=1
+                   => it is signaling EOI (not so if we are under ATN)
+                   acknowledge we received it by setting DATA=0 for 60us */
+#if IEC_DEVICE_DEBUG > 3
+                log_message(serial_iec_device_log,
+                            "device %i snooped EOI on channel %i", 
+                            devnr, iec->secondary & 0x0f);
+#endif
+                //iecbus_device_write(devnr, (BYTE)IECBUS_DEVICE_WRITE_CLK);
+                iec->state = P_WAITEOI;
+		iec->eoi = 1;
+                iec->timeout = clk_value + US2CYCLES(60);
+            }
+            break;
+          case P_WAITEOI:
+            if ((bus & IECBUS_DEVICE_READ_DATA)) {
+		iec->state = P_EOI;
+	    }
+	    break;
+          case P_EOI:
+            if (!(bus & IECBUS_DEVICE_READ_DATA)) {
+            	//if (clk_value >= iec->timeout) {
+                //	/* Set DATA back to 1 and wait for sender to set CLK=0 */
+                //	iecbus_device_write(devnr, (BYTE)(IECBUS_DEVICE_WRITE_CLK
+                //                    | IECBUS_DEVICE_WRITE_DATA));
+                iec->state = P_EOIw;
+            }
+            break;
+          case P_EOIw:
+            if (!(bus & IECBUS_DEVICE_READ_CLK)) {
+                /* sender set CLK=0, is about to send first bit */
+                iec->state = P_BIT0;
+            }
+            break;
+          case P_BIT0:
+          case P_BIT1:
+          case P_BIT2:
+          case P_BIT3:
+          case P_BIT4:
+          case P_BIT5:
+          case P_BIT6:
+          case P_BIT7:
+            if (bus & IECBUS_DEVICE_READ_CLK) {
+                /* sender set CLK=1, signaling that the DATA line
+                represents a valid bit */
+                BYTE bit = 1<<((BYTE)(iec->state-P_BIT0)/2);
+                 iec->byte = (iec->byte & ~bit)
+                            | ((bus & IECBUS_DEVICE_READ_DATA) ? bit : 0);
+
+                /* go to associated P_BIT(n)w state, waiting for sender to
+                   set CLK=0 */
+                iec->state++;
+            }
+            break;
+          case P_BIT0w:
+          case P_BIT1w:
+          case P_BIT2w:
+          case P_BIT3w:
+          case P_BIT4w:
+          case P_BIT5w:
+          case P_BIT6w:
+            if (!(bus & IECBUS_DEVICE_READ_CLK)) {
+                /* sender set CLK=0. go to P_BIT(n+1) state to receive
+                   next bit */
+                iec->state++;
+            }
+            break;
+          case P_BIT7w:
+            if (!(bus & IECBUS_DEVICE_READ_CLK)) {
+                /* sender set CLK=0 and this was the last bit */
+#if IEC_DEVICE_DEBUG > 2
+                log_message(serial_iec_device_log,
+                           "device %i received : 0x%02x (%c) %s", 
+                           devnr, iec->byte,
+                           isprint(iec->byte) ? iec->byte : '.',
+			   (iec->flags & P_ATN)?" under atn":"");
+#endif
+                    /* We are currently snooping for data
+                       => pass received byte on to the upper level */
+#if IEC_DEVICE_DEBUG > 1
+                    log_message(serial_iec_device_log, 
+                                "device %i received 0x%02x (%c) on channel %i", 
+                                devnr, iec->byte,
+                                isprint(iec->byte) ? iec->byte : '.',
+                                iec->secondary & 0x0f);
+#endif
+		    if (iec->primary & 0x20) {
+			siec_send(iec->byte, iec->eoi);
+		    } else {
+			siec_recv(iec->byte, 0, iec->eoi);
+		    }
+
+                    //set_st(iec->st[iec->secondary & 0x0f]);
+                    //serial_iec_bus_write(devnr, iec->secondary, iec->byte,
+                    //                     set_st);
+                    //iec->st[iec->secondary & 0x0f] = get_st();
+
+                    //if (iec->st[iec->secondary & 0x0f] != 0) {
+                        /* there was an error during iec_bus_write => stop
+                           listening.  This will signal
+                           an error condition to the sender */
+                    //    iec->state = P_DONE0;
+                    //} else {
+                        /* Acknowledge frame by setting DATA=0 */
+                        //iecbus_device_write(devnr,
+                        //                    (BYTE)IECBUS_DEVICE_WRITE_CLK);
+                        
+                        /* repeat from P_PRE2 (we know that CLK=0 so no
+                           need to go to P_PRE1) */
+                        iec->state = P_POST0;
+                    //}
+                
+            }
+            break;
+          case P_POST0:
+            if (!(bus & IECBUS_DEVICE_READ_DATA)) {
+                /* sender set CLK=0. go to P_BIT(n+1) state to receive
+                   next bit */
+                iec->state = P_PRE2;
+            }
+            break;
+          case P_DONE0:
+            /* we're just waiting for the busmaster to set ATN back to 1 */
+            break;
+        }
+    } else
     if (iec->flags & (P_ATN | P_LISTENING)) {
         /* we are either under ATN or in "listening" mode */
-
         switch (iec->state) {
           case P_PRE0: 
             /* ignore anything that happens during first 100us after falling
@@ -483,14 +834,19 @@
                 /* react by setting DATA=1 ("ready-for-data") */
                 iecbus_device_write(devnr, (BYTE)(IECBUS_DEVICE_WRITE_CLK
                                     | IECBUS_DEVICE_WRITE_DATA));
-                iec->timeout = clk_value + US2CYCLES(200);
-                iec->state = P_READY;
+                iec->state = P_PRE3;
             }
-            break;
+	  case P_PRE3:
+            if (bus & IECBUS_DEVICE_READ_DATA) {
+                iec->state = P_READY;
+                iec->timeout = clk_value + US2CYCLES(200);
+	    }
+	    break;	
           case P_READY:
             if (!(bus & IECBUS_DEVICE_READ_CLK)) {
                 /* sender set CLK=0, is about to send first bit */
                 iec->state = P_BIT0;
+		iec->eoi = 0;
             } else if (!(iec->flags & P_ATN)
                 && (clk_value >= iec->timeout)) {
                 /* sender did not set CLK=0 within 200us after we set DATA=1
@@ -503,6 +859,7 @@
 #endif
                 iecbus_device_write(devnr, (BYTE)IECBUS_DEVICE_WRITE_CLK);
                 iec->state = P_EOI;
+		iec->eoi = 1;
                 iec->timeout = clk_value + US2CYCLES(60);
             }
             break;
@@ -558,11 +915,15 @@
                 /* sender set CLK=0 and this was the last bit */
 #if IEC_DEVICE_DEBUG > 2
                 log_message(serial_iec_device_log,
-                           "device %i received : 0x%02x (%c)", 
+                           "device %i received : 0x%02x (%c) %s", 
                            devnr, iec->byte,
-                           isprint(iec->byte) ? iec->byte : '.');
+                           isprint(iec->byte) ? iec->byte : '.',
+			   (iec->flags & P_ATN)?" under atn":"");
 #endif
                 if (iec->flags & P_ATN) {
+
+		siec_attention(iec->byte);
+
                     /* We are currently receiving under ATN.  Store first
                        two bytes received
                        (contain primary and secondary address) */
@@ -571,8 +932,8 @@
                     else if (iec->secondary == 0)
                         iec->secondary = iec->byte;
 
-                    if (iec->primary != 0x3f && iec->primary != 0x5f
-                        && (((unsigned int)iec->primary & 0x1f) != devnr)) {
+                    if (0 /*iec->primary != 0x3f && iec->primary != 0x5f
+                        && (((unsigned int)iec->primary & 0x1f) != devnr)*/) {
                         /* This is NOT a UNLISTEN (0x3f) or UNTALK (0x5f)
                            command and the primary address is not ours =>
                            Don't acknowledge the frame and stop listening.
@@ -598,6 +959,11 @@
                                 isprint(iec->byte) ? iec->byte : '.',
                                 iec->secondary & 0x0f);
 #endif
+		if (iec->primary & 0x20) {
+			siec_send(iec->byte, iec->eoi);
+		} else {
+			siec_recv(iec->byte, 0, iec->eoi);
+		}
                     set_st(iec->st[iec->secondary & 0x0f]);
                     serial_iec_bus_write(devnr, iec->secondary, iec->byte,
                                          set_st);
@@ -615,11 +981,18 @@
                         
                         /* repeat from P_PRE2 (we know that CLK=0 so no
                            need to go to P_PRE1) */
-                        iec->state = P_PRE2;
+                        iec->state = P_POST0;
                     }
                 }
             }
             break;
+          case P_POST0:
+            if (!(bus & IECBUS_DEVICE_READ_DATA)) {
+                /* sender set CLK=0. go to P_BIT(n+1) state to receive
+                   next bit */
+                iec->state = P_PRE2;
+            }
+            break;
           case P_DONE0:
             /* we're just waiting for the busmaster to set ATN back to 1 */
             break;
