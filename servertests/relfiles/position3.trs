init

# reltest3.c: test B
# create 14 records of len 20
# position to record 26 in same block

message reltest3.c / B

##############################################
# open REL file (chan 2), expect 
send :FS_OPEN_RW .len 02 54 3d 4c 32 30 00 00 'rel2' 00 
expect :FS_REPLY .len 02 02 14 00

# send POSITION to record 0 (chan 2), expect OK
send :FS_POSITION .len 02 00 00
expect :FS_REPLY .len 02 00

# read record (READ chan 2), expect record data
# note: will be in multiple read chunks because of buffer length
# restrictions
send :FS_READ .len 02
expect :FS_DATA .len 02 ff .dsb 13,00 ff .dsb 13,00 ff .dsb 13,00 ff

# until here all is part of the firmware OPEN
##############################################
# here starts the actual test payload

message POSITION to record #13 - is in second block, so result in rec not present
send :FS_POSITION .len 02 0d 00
expect :FS_REPLY .len 02 32

# each write sends an own position
message POSITION to record #13
send :FS_POSITION .len 02 0d 00
expect :FS_REPLY .len 02 32

message send data (EOF as end of record marker), to enlarge file
send :FS_WRITE_EOF .len 02 "FOO" 0d .dsb 10,0
expect :FS_REPLY .len 02 00

# POS to end of block
message POSITION to record #25
send :FS_POSITION .len 02 19 00
expect :FS_REPLY .len 02 32

# each write sends an own position
message POSITION to record #25
send :FS_POSITION .len 02 19 00
expect :FS_REPLY .len 02 32

message send data (EOF as end of record marker), to enlarge file
send :FS_WRITE_EOF .len 02 "12345" 0d .dsb 0e,0
expect :FS_REPLY .len 02 00

# close file
send :FS_CLOSE .len 02
expect :FS_REPLY .len 02 00 



